-- Safety Instructions and other initial code remain the same...

-- At the end of library:window, after playerlist

-- Add to style or another tab if needed, but as per code, there's window.esp_section

-- In the code:

local indicator = library:indicator() -- if needed

-- Then return

-- But to add ESP UI elements:

local esp_section = window.esp_section

esp_section:toggle({name = "Enabled", flag = "ESP_Enabled", default = false})

esp_section:toggle({name = "Use Priority Color", flag = "Use_Priority_Color", default = true})

esp_section:toggle({name = "Boxes", flag = "Boxes", default = true, callback = function() window.esp_preview.refresh_elements() end})

esp_section:dropdown({name = "Box Type", items = {"Full", "Corner"}, default = "Full", flag = "Box_Type", callback = function() window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Box Color", flag = "Box_Color", color = Color3.new(1,1,1), callback = function() window.esp_preview.refresh_elements() end})

esp_section:toggle({name = "Names", flag = "Names", default = true, callback = function() window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Name Color", flag = "Name_Color", color = Color3.new(1,1,1), callback = function() window.esp_preview.refresh_elements() end})

esp_section:toggle({name = "Healthbar", flag = "Healthbar", default = true, callback = function() window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Health Low", flag = "Health_Low", color = Color3.new(1,0,0), callback = function() window.esp_preview.change_health(50) window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Health High", flag = "Health_High", color = Color3.new(0,1,0), callback = function() window.esp_preview.change_health(50) window.esp_preview.refresh_elements() end})

esp_section:toggle({name = "Distance", flag = "Distance", default = true, callback = function() window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Distance Color", flag = "Distance_Color", color = Color3.new(1,1,1), callback = function() window.esp_preview.refresh_elements() end})

esp_section:toggle({name = "Weapon", flag = "Weapon", default = true, callback = function() window.esp_preview.refresh_elements() end})

esp_section:colorpicker({name = "Weapon Color", flag = "Weapon_Color", color = Color3.new(1,1,1), callback = function() window.esp_preview.refresh_elements() end})

-- Now, add the ESP implementation

library.esp_drawings = {}

local function get_box_dimensions(char)
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return nil end
    local head = char:FindFirstChild("Head")
    if not head then return nil end
    local head_pos, head_vis = camera:WorldToViewportPoint(head.Position + Vector3.new(0, 1, 0))
    local leg_pos, leg_vis = camera:WorldToViewportPoint(root.Position - Vector3.new(0, 4, 0))
    if not (head_vis or leg_vis) then return nil end
    local top = Vector2.new(head_pos.X, head_pos.Y)
    local bottom = Vector2.new(leg_pos.X, leg_pos.Y)
    local width = math.abs(top.X - bottom.X) + 6
    local height = math.abs(top.Y - bottom.Y) + 6
    local size = Vector2.new(math.clamp(width, 12, 80), math.clamp(height, 24, 160))
    size = Vector2.new(math.floor(size.X), math.floor(size.Y))
    local position = Vector2.new(math.floor((top.X + bottom.X) / 2 - size.X / 2), math.floor(math.min(top.Y, bottom.Y)))
    return position, size, head_vis or leg_vis
end

local function new_line()
    return library:new_drawing("Line", {Visible = false, Thickness = 1, Transparency = 1, Color = Color3.new(1,1,1)})
end

library:connection(run.RenderStepped, function()
    if flags["ESP_Enabled"] then
        for _, player in ipairs(players:GetPlayers()) do
            if player ~= lp then
                local drawings = library.esp_drawings[player] or {}
                local char = player.Character
                if char and char:FindFirstChild("Humanoid") and char:FindFirstChild("HumanoidRootPart") then
                    local hum = char.Humanoid
                    local root = char.HumanoidRootPart
                    local pos, size, onscreen = get_box_dimensions(char)
                    if onscreen then
                        local priority = library.get_priority(player) or "Neutral"
                        local pcolor = patterns[priority]
                        local color = (flags["Use_Priority_Color"] and pcolor) or flags["Box_Color"].Color
                        local ocolor = Color3.new(0,0,0)
                        local ncolor = flags["Name_Color"].Color or color
                        local dcolor = flags["Distance_Color"].Color or color
                        local wcolor = flags["Weapon_Color"].Color or color

                        -- Create drawings if not exist
                        if not drawings.box_lines then
                            drawings.box_lines = {}
                            drawings.box_outline_lines = {}
                            for i = 1, 8 do
                                drawings.box_lines[i] = new_line()
                                drawings.box_outline_lines[i] = new_line()
                            end
                            drawings.name = library:new_drawing("Text", {Visible = false, Color = Color3.new(1,1,1), Size = 13, Center = true, Outline = true, Font = 2})
                            drawings.health_bg = new_line()
                            drawings.healthbar = new_line()
                            drawings.distance = library:new_drawing("Text", {Visible = false, Color = Color3.new(1,1,1), Size = 12, Center = true, Outline = true, Font = 2})
                            drawings.weapon = library:new_drawing("Text", {Visible = false, Color = Color3.new(1,1,1), Size = 12, Center = true, Outline = true, Font = 2})
                            library.esp_drawings[player] = drawings
                        end

                        -- Box
                        if flags["Boxes"] then
                            local lines = drawings.box_lines
                            local olines = drawings.box_outline_lines
                            local fraction = (flags["Box_Type"] == "Full") and 1 or 0.3
                            local w = size.X
                            local h = size.Y
                            local p = pos

                            -- tl_h
                            lines[1].From = p
                            lines[1].To = p + Vector2.new(w * fraction, 0)
                            lines[1].Color = color
                            lines[1].Visible = true
                            olines[1].From = p
                            olines[1].To = lines[1].To
                            olines[1].Color = ocolor
                            olines[1].Thickness = 3
                            olines[1].Visible = true

                            -- tl_v
                            lines[2].From = p
                            lines[2].To = p + Vector2.new(0, h * fraction)
                            lines[2].Color = color
                            lines[2].Visible = true
                            olines[2].From = p
                            olines[2].To = lines[2].To
                            olines[2].Color = ocolor
                            olines[2].Thickness = 3
                            olines[2].Visible = true

                            -- tr_h
                            lines[3].From = p + Vector2.new(w * (1 - fraction), 0)
                            lines[3].To = p + Vector2.new(w, 0)
                            lines[3].Color = color
                            lines[3].Visible = true
                            olines[3].From = lines[3].From
                            olines[3].To = lines[3].To
                            olines[3].Color = ocolor
                            olines[3].Thickness = 3
                            olines[3].Visible = true

                            -- tr_v
                            lines[4].From = p + Vector2.new(w, 0)
                            lines[4].To = p + Vector2.new(w, h * fraction)
                            lines[4].Color = color
                            lines[4].Visible = true
                            olines[4].From = lines[4].From
                            olines[4].To = lines[4].To
                            olines[4].Color = ocolor
                            olines[4].Thickness = 3
                            olines[4].Visible = true

                            -- bl_h
                            lines[5].From = p + Vector2.new(0, h)
                            lines[5].To = p + Vector2.new(w * fraction, h)
                            lines[5].Color = color
                            lines[5].Visible = true
                            olines[5].From = lines[5].From
                            olines[5].To = lines[5].To
                            olines[5].Color = ocolor
                            olines[5].Thickness = 3
                            olines[5].Visible = true

                            -- bl_v
                            lines[6].From = p + Vector2.new(0, h * (1 - fraction))
                            lines[6].To = p + Vector2.new(0, h)
                            lines[6].Color = color
                            lines[6].Visible = true
                            olines[6].From = lines[6].From
                            olines[6].To = lines[6].To
                            olines[6].Color = ocolor
                            olines[6].Thickness = 3
                            olines[6].Visible = true

                            -- br_h
                            lines[7].From = p + Vector2.new(w * (1 - fraction), h)
                            lines[7].To = p + Vector2.new(w, h)
                            lines[7].Color = color
                            lines[7].Visible = true
                            olines[7].From = lines[7].From
                            olines[7].To = lines[7].To
                            olines[7].Color = ocolor
                            olines[7].Thickness = 3
                            olines[7].Visible = true

                            -- br_v
                            lines[8].From = p + Vector2.new(w, h * (1 - fraction))
                            lines[8].To = p + Vector2.new(w, h)
                            lines[8].Color = color
                            lines[8].Visible = true
                            olines[8].From = lines[8].From
                            olines[8].To = lines[8].To
                            olines[8].Color = ocolor
                            olines[8].Thickness = 3
                            olines[8].Visible = true
                        else
                            for i=1,8 do
                                drawings.box_lines[i].Visible = false
                                drawings.box_outline_lines[i].Visible = false
                            end
                        end

                        -- Names
                        if flags["Names"] then
                            drawings.name.Text = player.Name
                            drawings.name.Position = pos + Vector2.new(size.X / 2, -drawings.name.TextBounds.Y - 2)
                            drawings.name.Color = ncolor
                            drawings.name.Visible = true
                        else
                            drawings.name.Visible = false
                        end

                        -- Healthbar
                        if flags["Healthbar"] then
                            local health_frac = hum.Health / hum.MaxHealth
                            local hb_height = size.Y * health_frac
                            local hb_pos_y = pos.Y + size.Y - hb_height
                            drawings.health_bg.From = Vector2.new(pos.X - 5, pos.Y)
                            drawings.health_bg.To = Vector2.new(pos.X - 5, pos.Y + size.Y)
                            drawings.health_bg.Visible = true
                            drawings.healthbar.From = Vector2.new(pos.X - 5, hb_pos_y)
                            drawings.healthbar.To = Vector2.new(pos.X - 5, pos.Y + size.Y)
                            local hcol = flags["Health_Low"].Color:Lerp(flags["Health_High"].Color, health_frac)
                            drawings.healthbar.Color = hcol
                            drawings.healthbar.Visible = true
                        else
                            drawings.health_bg.Visible = false
                            drawings.healthbar.Visible = false
                        end

                        -- Distance
                        if flags["Distance"] then
                            local dist = (lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and (lp.Character.HumanoidRootPart.Position - root.Position).Magnitude) or 0
                            drawings.distance.Text = math.floor(dist) .. "st"
                            drawings.distance.Position = pos + Vector2.new(size.X / 2, size.Y + 2)
                            drawings.distance.Color = dcolor
                            drawings.distance.Visible = true
                        else
                            drawings.distance.Visible = false
                        end

                        -- Weapon
                        if flags["Weapon"] then
                            local tool = char:FindFirstChildOfClass("Tool")
                            local tname = tool and tool.Name or "None"
                            drawings.weapon.Text = "[" .. tname .. "]"
                            drawings.weapon.Position = pos + Vector2.new(size.X / 2, size.Y + (flags["Distance"] and drawings.distance.TextBounds.Y + 2 or 2))
                            drawings.weapon.Color = wcolor
                            drawings.weapon.Visible = true
                        else
                            drawings.weapon.Visible = false
                        end
                    else
                        for key, d in pairs(drawings) do
                            if type(d) == "table" then
                                for _, l in ipairs(d) do l.Visible = false end
                            else
                                d.Visible = false
                            end
                        end
                    end
                end
                end
            end
        end
    else
        for _, drawings in pairs(library.esp_drawings) do
            for key, d in pairs(drawings) do
                if type(d) == "table" then
                    for _, l in ipairs(d) do l.Visible = false end
                else
                    d.Visible = false
                end
            end
        end
    end
end)

library:connection(players.PlayerRemoving, function(player)
    local drawings = library.esp_drawings[player]
    if drawings then
        for key, d in pairs(drawings) do
            if type(d) == "table" then
                for _, l in ipairs(d) do l:Remove() end
            else
                d:Remove()
            end
        end
        library.esp_drawings[player] = nil
    end
end)

-- End of modifications

return library, themes;
